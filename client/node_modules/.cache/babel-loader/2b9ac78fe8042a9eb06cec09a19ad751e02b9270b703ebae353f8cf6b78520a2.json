{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Inventory API\nexport const inventoryAPI = {\n  getInventory: () => api.get('/inventory'),\n  addInventory: data => api.post('/inventory', data),\n  getInventoryHistory: (period = 'all') => api.get(`/inventory/history?period=${period}`),\n  updateInventory: (id, data) => api.put(`/inventory/${id}`, data)\n};\n\n// Customers API\nexport const customersAPI = {\n  getCustomers: type => api.get('/customers', {\n    params: {\n      type\n    }\n  }),\n  addCustomer: data => api.post('/customers', data),\n  updateCustomer: (id, data) => api.put(`/customers/${id}`, data),\n  deleteCustomer: id => api.delete(`/customers/${id}`)\n};\n\n// Orders API\nexport const ordersAPI = {\n  getOrders: (filters = {}) => {\n    const params = new URLSearchParams();\n    if (filters.status) params.append('status', filters.status);\n    if (filters.customer_id) params.append('customer_id', filters.customer_id);\n    if (filters.period) params.append('period', filters.period);\n    return api.get(`/orders?${params.toString()}`);\n  },\n  createOrder: data => api.post('/orders', data),\n  updateOrder: (orderId, data) => api.put(`/orders/${orderId}`, data),\n  updateOrderStatus: (orderId, status) => api.put(`/orders/${orderId}/status`, {\n    status\n  })\n};\n\n// Reports API\nexport const reportsAPI = {\n  getSalesReport: period => api.get('/reports/sales', {\n    params: {\n      period\n    }\n  }),\n  getInventoryReport: () => api.get('/reports/inventory')\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","inventoryAPI","getInventory","get","addInventory","data","post","getInventoryHistory","period","updateInventory","id","put","customersAPI","getCustomers","type","params","addCustomer","updateCustomer","deleteCustomer","delete","ordersAPI","getOrders","filters","URLSearchParams","status","append","customer_id","toString","createOrder","updateOrder","orderId","updateOrderStatus","reportsAPI","getSalesReport","getInventoryReport"],"sources":["/home/lawrence/Desktop/projects/JB-Rice/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Inventory API\nexport const inventoryAPI = {\n  getInventory: () => api.get('/inventory'),\n  addInventory: (data) => api.post('/inventory', data),\n  getInventoryHistory: (period = 'all') => api.get(`/inventory/history?period=${period}`),\n  updateInventory: (id, data) => api.put(`/inventory/${id}`, data)\n};\n\n// Customers API\nexport const customersAPI = {\n  getCustomers: (type) => api.get('/customers', { params: { type } }),\n  addCustomer: (data) => api.post('/customers', data),\n  updateCustomer: (id, data) => api.put(`/customers/${id}`, data),\n  deleteCustomer: (id) => api.delete(`/customers/${id}`),\n};\n\n// Orders API\nexport const ordersAPI = {\n  getOrders: (filters = {}) => {\n    const params = new URLSearchParams();\n    if (filters.status) params.append('status', filters.status);\n    if (filters.customer_id) params.append('customer_id', filters.customer_id);\n    if (filters.period) params.append('period', filters.period);\n    return api.get(`/orders?${params.toString()}`);\n  },\n  createOrder: (data) => api.post('/orders', data),\n  updateOrder: (orderId, data) => api.put(`/orders/${orderId}`, data),\n  updateOrderStatus: (orderId, status) => api.put(`/orders/${orderId}/status`, { status })\n};\n\n// Reports API\nexport const reportsAPI = {\n  getSalesReport: (period) => api.get('/reports/sales', { params: { period } }),\n  getInventoryReport: () => api.get('/reports/inventory'),\n};\n\nexport default api; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,YAAY,GAAG;EAC1BC,YAAY,EAAEA,CAAA,KAAML,GAAG,CAACM,GAAG,CAAC,YAAY,CAAC;EACzCC,YAAY,EAAGC,IAAI,IAAKR,GAAG,CAACS,IAAI,CAAC,YAAY,EAAED,IAAI,CAAC;EACpDE,mBAAmB,EAAEA,CAACC,MAAM,GAAG,KAAK,KAAKX,GAAG,CAACM,GAAG,CAAC,6BAA6BK,MAAM,EAAE,CAAC;EACvFC,eAAe,EAAEA,CAACC,EAAE,EAAEL,IAAI,KAAKR,GAAG,CAACc,GAAG,CAAC,cAAcD,EAAE,EAAE,EAAEL,IAAI;AACjE,CAAC;;AAED;AACA,OAAO,MAAMO,YAAY,GAAG;EAC1BC,YAAY,EAAGC,IAAI,IAAKjB,GAAG,CAACM,GAAG,CAAC,YAAY,EAAE;IAAEY,MAAM,EAAE;MAAED;IAAK;EAAE,CAAC,CAAC;EACnEE,WAAW,EAAGX,IAAI,IAAKR,GAAG,CAACS,IAAI,CAAC,YAAY,EAAED,IAAI,CAAC;EACnDY,cAAc,EAAEA,CAACP,EAAE,EAAEL,IAAI,KAAKR,GAAG,CAACc,GAAG,CAAC,cAAcD,EAAE,EAAE,EAAEL,IAAI,CAAC;EAC/Da,cAAc,EAAGR,EAAE,IAAKb,GAAG,CAACsB,MAAM,CAAC,cAAcT,EAAE,EAAE;AACvD,CAAC;;AAED;AACA,OAAO,MAAMU,SAAS,GAAG;EACvBC,SAAS,EAAEA,CAACC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC3B,MAAMP,MAAM,GAAG,IAAIQ,eAAe,CAAC,CAAC;IACpC,IAAID,OAAO,CAACE,MAAM,EAAET,MAAM,CAACU,MAAM,CAAC,QAAQ,EAAEH,OAAO,CAACE,MAAM,CAAC;IAC3D,IAAIF,OAAO,CAACI,WAAW,EAAEX,MAAM,CAACU,MAAM,CAAC,aAAa,EAAEH,OAAO,CAACI,WAAW,CAAC;IAC1E,IAAIJ,OAAO,CAACd,MAAM,EAAEO,MAAM,CAACU,MAAM,CAAC,QAAQ,EAAEH,OAAO,CAACd,MAAM,CAAC;IAC3D,OAAOX,GAAG,CAACM,GAAG,CAAC,WAAWY,MAAM,CAACY,QAAQ,CAAC,CAAC,EAAE,CAAC;EAChD,CAAC;EACDC,WAAW,EAAGvB,IAAI,IAAKR,GAAG,CAACS,IAAI,CAAC,SAAS,EAAED,IAAI,CAAC;EAChDwB,WAAW,EAAEA,CAACC,OAAO,EAAEzB,IAAI,KAAKR,GAAG,CAACc,GAAG,CAAC,WAAWmB,OAAO,EAAE,EAAEzB,IAAI,CAAC;EACnE0B,iBAAiB,EAAEA,CAACD,OAAO,EAAEN,MAAM,KAAK3B,GAAG,CAACc,GAAG,CAAC,WAAWmB,OAAO,SAAS,EAAE;IAAEN;EAAO,CAAC;AACzF,CAAC;;AAED;AACA,OAAO,MAAMQ,UAAU,GAAG;EACxBC,cAAc,EAAGzB,MAAM,IAAKX,GAAG,CAACM,GAAG,CAAC,gBAAgB,EAAE;IAAEY,MAAM,EAAE;MAAEP;IAAO;EAAE,CAAC,CAAC;EAC7E0B,kBAAkB,EAAEA,CAAA,KAAMrC,GAAG,CAACM,GAAG,CAAC,oBAAoB;AACxD,CAAC;AAED,eAAeN,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}